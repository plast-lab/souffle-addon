.type ServerId <: symbol
.type ClientId <: symbol
.functor hashsum(i1:number, i2:number):number stateful

/*
 * Ordering predicates (scaffolding)
 */
.decl IsServer(id: ServerId)
.decl ServerLT(s1: ServerId, s2: ServerId)
ServerLT(s1, s2) :-
  IsServer(s1),
  IsServer(s2),
  ord(s1) < ord(s2).

.decl ServerIndex(s: ServerId, index: number)
ServerIndex(s, i) :-
  IsServer(s),
  i = count : ServerLT(_, s).

.decl FirstServer(s: ServerId)
FirstServer(s) :-
  IsServer(s),
  !ServerLT(_, s).

.decl LastServer(s: ServerId)
LastServer(s) :-
  IsServer(s),
  !ServerLT(s, _).

.decl LastServerIndex(s: ServerId, index: number)
LastServerIndex(s, index) :-
  LastServer(s),
  ServerIndex(s, index).

.decl NextServer(p: ServerId, n: ServerId)
NextServer(p, n) :-
  ServerIndex(p, i),
  ServerIndex(n, i+1).

.decl NumServers(n: number)
NumServers(n+1) :-
  LastServerIndex(_, n).


.decl IsClient(id: ClientId)
.decl ClientLT(c1: ClientId, c2: ClientId)
ClientLT(c1, c2) :-
  IsClient(c1),
  IsClient(c2),
  ord(c1) < ord(c2).

.decl ClientIndex(c: ClientId, index: number)
ClientIndex(c, i) :-
  IsClient(c),
  i = count : ClientLT(_, c).

.decl FirstClient(c: ClientId)
FirstClient(c) :-
  IsClient(c),
  !ClientLT(_, c).

.decl LastClient(c: ClientId)
LastClient(c) :-
  IsClient(c),
  !ClientLT(c, _).

.decl LastClientIndex(c: ClientId, index: number)
LastClientIndex(c, index) :-
  LastClient(c),
  ClientIndex(c, index).

.decl NextClient(p: ClientId, n: ClientId)
NextClient(p, n) :-
  ClientIndex(p, i),
  ClientIndex(n, i+1).

.decl NumClients(n: number)
NumClients(n+1) :-
  LastClientIndex(_, n).


// Similar ordering for client-server pairs
.decl ClientServerIndex(c: ClientId, s: ServerId, i: number)
ClientServerIndex(c, s, ci*ns + si) :-
  ClientIndex(c, ci),
  ServerIndex(s, si),
  NumServers(ns).


/*
 * Types
 */

.type Action = [
  kind : symbol, // "connect" or "disconnect"
  clientId : ClientId,
  serverId : ServerId
]

.type LockedState <: number

.type HeldState <: number

.type State = [
  locked: LockedState,
  held: HeldState
]


.decl DecomposeAction(a: Action, k: symbol, c: ClientId, s: ServerId)
DecomposeAction(a, k, c, s) :-
  IsClient(c),
  IsServer(s),
  (k = "connect"; k = "disconnect"),
  a = [k, c, s].



// Single transition component
.comp Transition {
  /*
   * Main state predicates
   */
   
  .decl Locked(state: State, server: ServerId)
  .decl Locked_Prime(prevState: State, action: Action, server: ServerId)
  .decl Locked_Prime_Index(prevState: State, action: Action, si: number)

  // client holds server
  .decl Held(state: State, client: ClientId, server: ServerId)
  .decl Held_Prime(prevState: State, action: Action, client: ClientId, server: ServerId)
  .decl Held_Prime_Index(prevState: State, action: Action, csi: number)
  
  .decl IsState(state: State)
  IsState(state) :-
    (Locked(state, _);
     Held(state, _, _)).

  .decl ExaminedState(state: State)  // Grows monotonically. Means "will have been examined *after* the current stage".
  ExaminedState(state) :-
    IsState(state).

  Locked_Prime_Index(prevState, action, si) :-
    Locked_Prime(prevState, action, server),
    ServerIndex(server, si).
    
  Held_Prime_Index(prevState, action, csi) :-
    Held_Prime(prevState, action, client, server),
    ClientServerIndex(client, server, csi).


  /*
   * Forall iterations, in order to finalize the state. Scaffolding, not essential logic.
   */

  .decl PossibleAction(prevState: State, action: Action)
  PossibleAction(prevState, action) :-
    ConnectPossibleAction(prevState, action);
    DisconnectPossibleAction(prevState, action).

  .decl HeldStateFinalized(prevState: State, action: Action, hstate: HeldState)
  HeldStateFinalized(prevState, action, as(id, HeldState)) :-
    PossibleAction(prevState, action),
    id = @@hashsum i: 0, {Held_Prime_Index(prevState, action, i)}.

  HeldStateFinalized(prevState, action, 0) :-
    PossibleAction(prevState, action),
    !Held_Prime_Index(prevState, action, _).

  .decl LockedStateFinalized(prevState: State, action: Action, lstate: LockedState)
  LockedStateFinalized(prevState, action, as(id, LockedState)) :-
    PossibleAction(prevState, action),
    id = @@hashsum i: 0, {Locked_Prime_Index(prevState, action, i)}.

  LockedStateFinalized(prevState, action, 0) :-
    PossibleAction(prevState, action),
    !Locked_Prime_Index(prevState, action, _).

  .decl TotalStateFinalized(state: State, prevState: State, action: Action)
  TotalStateFinalized(state, prevState, action) :-
    HeldStateFinalized(prevState, action, hs),
    LockedStateFinalized(prevState, action, ls),
    state = [ls, hs],
    !ExaminedState(state).


  /*
   * Optimization predicates capturing just the "not equals" relation
   */

  .decl NotSameServer(s1: ServerId, s2: ServerId)
  NotSameServer(s1, s2) :-
    IsServer(s1),
    IsServer(s2),
    s1 != s2.

  .decl NotSameClient(c1: ClientId, c2: ClientId)
  NotSameClient(c1, c2) :-
    IsClient(c1),
    IsClient(c2),
    c1 != c2.


  /*
   * Transition rules for next state
   */

  // Auxiliary predicates, both for optimization and used elsewhere
  .decl ConnectPossible(prevState: State, action: Action, c: ClientId, s: ServerId)
  ConnectPossible(prevState, action, c, s) :-
    Locked(prevState, s),
    DecomposeAction(action, "connect", c, s).

  .decl ConnectPossibleAction(prevState: State, action: Action)
  ConnectPossibleAction(prevState, action) :-
    ConnectPossible(prevState, action, _, _).
  
  // What happens to Held, upon a connect
  Held_Prime(prevState, action, c2, s2) :-
    ConnectPossibleAction(prevState, action),
    Held(prevState, c2, s2).

  Held_Prime(prevState, action, c, s) :-
    ConnectPossible(prevState, action, c, s).

  // Locked, upon a connect
  Locked_Prime(prevState, action, s2) :-
    ConnectPossible(prevState, action, _, s),
    Locked(prevState, s2),
    NotSameServer(s, s2).


  // Optimization predicates
  .decl DisconnectPossible(prevState: State, c: ClientId, s: ServerId, action: Action)
  DisconnectPossible(prevState, c, s, action) :-
    Held(prevState, c, s),
    DecomposeAction(action, "disconnect", c, s).

  .decl DisconnectPossibleAction(prevState: State, action: Action)
  DisconnectPossibleAction(prevState, action) :-
    DisconnectPossible(prevState, _, _, action).

  // What happens to Held, upon a disconnect
  Held_Prime(prevState, action, c2, s2) :-
    DisconnectPossible(prevState, c, s, action),
    Held(prevState, c2, s2),
    (NotSameClient(c, c2);
     NotSameServer(s, s2)).

  // Locked, upon a disconnect
  Locked_Prime(prevState, action, s2) :-
    DisconnectPossibleAction(prevState, action),
    Locked(prevState, s2).

  Locked_Prime(prevState, action, s) :-
    DisconnectPossible(prevState, _, s, action).

} // end of Transition component


.init T1 = Transition
.init T2 = Transition
.init T3 = Transition
.init T4 = Transition
.init T5 = Transition
.init T6 = Transition
.init T7 = Transition
.init TFinal = Transition

/*
 * Initial state (successor of nil)
 */ 

// Initial state is nil
T1.Locked(nil, s) :-
  IsServer(s).


/*
 * Connecting transitions
 */ 

#define CopyRelations(tNew, tOld) \
  tNew.Held(state, client, server) :- tOld.TotalStateFinalized(state, prevState, action), tOld.Held_Prime(prevState, action, client, server). \
  tNew.Locked(state, server) :- tOld.TotalStateFinalized(state, prevState, action),  tOld.Locked_Prime(prevState, action, server). \
  tNew.ExaminedState(state) :- tOld.ExaminedState(state).

CopyRelations(T2, T1)
CopyRelations(T3, T2)
CopyRelations(T4, T3)
CopyRelations(T5, T4)
CopyRelations(T6, T5)
CopyRelations(T7, T6)
CopyRelations(TFinal, T7)

.decl TotalHeld(state: State, c: ClientId, s: ServerId)
TotalHeld(state, c, s) :-
  T1.Held(state, c, s);
  T2.Held(state, c, s);
  T3.Held(state, c, s);
  T4.Held(state, c, s);
  T5.Held(state, c, s);
  T6.Held(state, c, s);
  T7.Held(state, c, s);
  TFinal.Held(state, c, s).

.decl TotalLocked(state: State, s: ServerId)
TotalLocked(state, s) :-
  T1.Locked(state, s);
  T2.Locked(state, s);
  T3.Locked(state, s);
  T4.Locked(state, s);
  T5.Locked(state, s);
  T6.Locked(state, s);
  T7.Locked(state, s);
  TFinal.Locked(state, s).

.decl TotalIsState(state: State)
TotalIsState(state) :-
  (TotalLocked(state, _);
   TotalHeld(state, _, _)),
  state != nil.

// .output TotalIsState

.decl Unsafe(state: State, c1: ClientId, c2: ClientId)
Unsafe(state, c1, c2) :-
  TotalHeld(state, c1, s),
  TotalHeld(state, c2, s),
  c1 != c2.


/*
 * Setup of problem instance
 */

IsServer("a").
IsServer("b").
IsServer("c").
IsServer("d").
IsServer("e").
IsServer("f").
IsServer("g").
IsClient("1").
IsClient("2").
IsClient("3").
IsClient("4").
IsClient("5").
IsClient("6").
IsClient("7").

// .printsize Locked
// .printsize Held


.printsize TotalIsState

.output Unsafe