.decl numbers(x:number)
.decl sum_result(x:number)
.decl hsum_result(x:number)
.output sum_result()
.output hsum_result()
.type List = [x: number, y: List]
.decl fold_result(x:List)
.output fold_result

.functor list_fold(a: List, elem: number):List stateful
.functor hashsum(i1:number, i2:number):number stateful

numbers(x) :- x = range(-100, 100).

sum_result(x) :-
    x = sum a : { numbers(a), a > 0 }.

hsum_result(x) :-
    x = @@hashsum a : 0, { numbers(a), a > 0 }.

fold_result(x) :-
    x = @@list_fold a : nil, { numbers(a), a > 0 }.